local.file_match "local_files" {
  path_targets = [
    { "__path__" = "/var/log/*.log", },
  ]
  sync_period = "5s"
}



loki.source.file "log_scrape" {
  targets       = local.file_match.local_files.targets
  tail_from_end = false
  forward_to    = [loki.process.filter_logs.receiver]
}


loki.process "filter_logs" {
  stage.drop {
    source              = ""
    expression          = ".*Connection closed by authenticating user root"
    drop_counter_reason = "noisy"
  }
  forward_to = [loki.write.grafana_loki.receiver]
}

//loki.write "grafana_loki" {
//  endpoint {
//    url = "http://loki-write.new-lgtm.svc.cluster.local:3100/loki/api/v1/push"
//    headers = {
//      "X-Scope-OrgID" = "1",
//    }
//  }
//}



loki.write "grafana_loki" {
  endpoint {
    url = "http://loki-write.new-lgtm.svc.cluster.local:3100/loki/api/v1/push"
    headers = {
      "X-Scope-OrgID" = "1",
    }
  }
}

prometheus.scrape "node_exporter" {
  job_name = "node-exporter"
  targets = [
    {
      __address__ = "node-exporter-prometheus-node-exporter.monitoring.svc.cluster.local:9100",
    },
  ]
  forward_to = [prometheus.remote_write.to_mimir.receiver]
}

prometheus.scrape "kube_state_metrics" {
  job_name = "kube-state-metrics"
  targets = [
    {
      __address__ = "kube-state-metrics.monitoring.svc.cluster.local:8080",
    },
  ]
  forward_to = [prometheus.remote_write.to_mimir.receiver]
}

prometheus.remote_write "to_mimir" {
  endpoint {
    url = "http://mimir-distributor.mimir.svc.cluster.local:8080/api/v1/push"
    headers = {
      "X-Scope-OrgID" = "1",
    }
  }
  

  // 인증이 필요한 경우 주석 해제
  // basic_auth {
  //   username = "my-user"
  //   password = "my-pass"
  // }
}
// 없애도될듯?
//discovery.kubernetes "pods" {
//  role = "pod"

//  namespaces {
//    own_namespace = false

//    names = ["new-lgtm"]
//  }

  //selectors {
    //role  = "pod"
    //label = "app.kubernetes.io/component in (canary,read)"
  //}
//}

prometheus.scrape "pods" {
  targets    = discovery.kubernetes.pod.targets
  forward_to = [prometheus.remote_write.default.receiver]
}

//  //
prometheus.remote_write "default" {
  endpoint {
    url = "http://mimir-distributor.mimir.svc.cluster.local:8080/api/v1/push"
    headers = {
      "X-Scope-OrgID" = "1",
    }
  }
}

// k8s 클러스터 로그 수집을 위한 설정 //

// discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
// It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
discovery.kubernetes "pod" {
  role = "pod"
  // Restrict to pods on the node to reduce cpu & memory usage
  selectors {
    role = "pod"
    field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
  }
}

// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
// If no rules are defined, then the input targets are exported as-is.
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  // Label creation - "namespace" field from "__meta_kubernetes_namespace"
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  // Label creation - "__path__" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

// loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

// loki.process receives log entries from other Loki components, applies one or more processing stages,
// and forwards the results to the list of receivers in the component's arguments.
loki.process "pod_logs" {
  stage.static_labels {
      values = {
        cluster = "441eaf1e-a1f9-4d01-8ba0-80a78d7cb5b1",
      }
  }

  forward_to = [loki.write.grafana_loki.receiver]
}